{"version":3,"sources":["components/TodoList/TodoList.tsx","api/todos.ts","components/CurrentUser/CurrentUser.tsx","App.tsx","index.tsx"],"names":["TodoList","state","query","todoStatus","handleSelectByStatus","event","value","target","setState","queryHandler","this","copyTodos","props","todos","filter","todo","title","toLowerCase","includes","completed","getSelectedUser","filterTodos","className","htmlFor","onChange","type","placeholder","map","classNames","readOnly","checked","userId","selectedUserId","onClick","id","React","Component","API_URL","getAllTodos","a","fetch","response","json","getSelectedUserDetails","editedUrl","CurrentUser","user","prevProps","loadUser","Error","name","email","phone","clearSelectedUser","App","todosAPI","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.7dc93105.chunk.js","sourcesContent":["import React from 'react';\nimport './TodoList.scss';\nimport classNames from 'classnames';\n\ntype Props = {\n  todos: Todo[],\n  selectedUserId: number,\n  getSelectedUser: (userId: number) => void,\n};\n\ninterface State {\n  query: string,\n  todoStatus: string,\n}\n\nexport class TodoList extends React.Component<Props, State> {\n  state: State = {\n    query: '',\n    todoStatus: 'all',\n  };\n\n  handleSelectByStatus = (event: React.ChangeEvent<HTMLSelectElement>) => {\n    const { value } = event.target;\n\n    this.setState({\n      todoStatus: value,\n    });\n  };\n\n  queryHandler = (event: React.ChangeEvent<HTMLInputElement>) => {\n    const { value } = event.target;\n\n    this.setState({\n      query: value,\n    });\n  };\n\n  filterTodos() {\n    const { query, todoStatus } = this.state;\n    const copyTodos = [...this.props.todos].filter((todo) => (\n      todo.title.toLowerCase().includes(query.toLowerCase())\n    ));\n\n    switch (todoStatus) {\n      case 'all': {\n        return copyTodos;\n      }\n\n      case 'finished': {\n        return copyTodos.filter(todo => todo.completed === true);\n      }\n\n      case 'unfinished': {\n        return copyTodos.filter(todo => todo.completed === false);\n      }\n\n      default: {\n        return copyTodos;\n      }\n    }\n  }\n\n  render() {\n    const { getSelectedUser } = this.props;\n    const todos = this.filterTodos();\n\n    return (\n      <div className=\"TodoList\">\n        <label htmlFor=\"selectTodosByStatus\">\n          Choose an status of todo:\n          <select\n            value={this.state.query}\n            onChange={this.handleSelectByStatus}\n          >\n            <option value=\"all\">All</option>\n            <option value=\"finished\">Finished</option>\n            <option value=\"unfinished\">Unfinished</option>\n          </select>\n        </label>\n        <input\n          type=\"text\"\n          placeholder=\"search\"\n          value={this.state.query}\n          onChange={this.queryHandler}\n        />\n        <h2>Todos:</h2>\n        <div className=\"TodoList__list-container\">\n          <ul className=\"TodoList__list\">\n            {todos.map((todo) => (\n              <li\n                key={todo.id}\n                className={classNames(\n                  'TodoList__item',\n                  { 'TodoList__item--checked': todo.completed },\n                  { 'TodoList__item--unchecked': !todo.completed },\n                )}\n              >\n                <label htmlFor=\"todo\">\n                  <input\n                    type=\"checkbox\"\n                    readOnly\n                    checked={todo.completed}\n                  />\n                  <p>{todo.title}</p>\n                </label>\n                <button\n                  className={classNames('TodoList__user-button button',\n                    { 'TodoList__user-button--selected': todo.userId === this.props.selectedUserId })}\n                  type=\"button\"\n                  onClick={() => {\n                    getSelectedUser(todo.userId);\n                  }}\n                >\n                  User&nbsp;\n                  {todo.userId}\n                </button>\n              </li>\n            ))}\n          </ul>\n        </div>\n      </div>\n    );\n  }\n}\n","// eslint-disable-next-line\nconst API_URL = `https://mate.academy/students-api/todos`;\n\nexport async function getAllTodos() {\n  const response = await fetch(API_URL);\n  const todos = await response.json();\n\n  return todos;\n}\n\nexport async function getSelectedUserDetails(userId: number) {\n  const editedUrl = `https://mate.academy/students-api/users/${userId}`;\n\n  try {\n    const response = await fetch(editedUrl);\n\n    return await response.json();\n  } catch (error) {\n    return null;\n  }\n}\n","import React from 'react';\nimport './CurrentUser.scss';\n\nimport { getSelectedUserDetails } from '../../api/todos';\n\ntype Props = {\n  selectedUserId: number,\n  clearSelectedUser: () => void,\n};\n\ntype State = {\n  user: User | null,\n};\n\nexport class CurrentUser extends React.Component<Props, State> {\n  state: State = {\n    user: null,\n  };\n\n  async componentDidMount() {\n    const user = await getSelectedUserDetails(this.props.selectedUserId);\n\n    this.setState({ user });\n  }\n\n  async componentDidUpdate(prevProps: Props) {\n    if (prevProps.selectedUserId !== this.props.selectedUserId) {\n      this.loadUser();\n    }\n  }\n\n  async loadUser() {\n    const user = await getSelectedUserDetails(this.props.selectedUserId);\n\n    if (user !== null) {\n      this.setState({ user });\n    } else {\n      throw new Error('Invalid User');\n    }\n  }\n\n  render(): React.ReactNode {\n    const { user } = this.state;\n\n    return (\n      <div className=\"CurrentUser\">\n        <h2 className=\"CurrentUser__title\">\n          <span>\n            {'Selected user: '}\n            {this.props.selectedUserId}\n          </span>\n        </h2>\n        <h3 className=\"CurrentUser__name\">{user?.name}</h3>\n        <p className=\"CurrentUser__email\">{user?.email}</p>\n        <p className=\"CurrentUser__phone\">{user?.phone}</p>\n        <button\n          type=\"button\"\n          className=\"TodoList__user-button TodoList__user-button--selected\n          button\"\n          onClick={() => (\n            this.props.clearSelectedUser()\n          )}\n        >\n          Clear\n        </button>\n      </div>\n    );\n  }\n}\n","import React from 'react';\nimport './App.scss';\nimport './styles/general.scss';\nimport { TodoList } from './components/TodoList';\nimport { CurrentUser } from './components/CurrentUser';\nimport * as todosAPI from './api/todos';\n\ninterface State {\n  todos: Todo[],\n  selectedUserId: number;\n}\n\nclass App extends React.Component<{}, State> {\n  state: State = {\n    todos: [],\n    selectedUserId: 0,\n  };\n\n  componentDidMount() {\n    this.getAllTodos();\n  }\n\n  getAllTodos = async () => {\n    const todos = await todosAPI.getAllTodos();\n\n    this.setState({ todos });\n  };\n\n  getSelectedUser = (selectedUserId: number) => {\n    this.setState({ selectedUserId });\n  };\n\n  clearSelectedUser = () => {\n    this.setState({ selectedUserId: 0 });\n  };\n\n  render() {\n    const { selectedUserId } = this.state;\n\n    return (\n      <div className=\"App\">\n        <div className=\"App__sidebar\">\n          <TodoList\n            todos={this.state.todos}\n            getSelectedUser={this.getSelectedUser}\n            selectedUserId={selectedUserId}\n          />\n        </div>\n\n        <div className=\"App__content\">\n          <div className=\"App__content-container\">\n            {selectedUserId ? (\n              <CurrentUser\n                selectedUserId={selectedUserId}\n                clearSelectedUser={this.clearSelectedUser}\n              />\n            ) : 'No user selected'}\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","import ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}