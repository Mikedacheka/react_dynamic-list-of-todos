{"version":3,"sources":["components/TodoList/TodoList.tsx","api/todos.ts","components/CurrentUser/CurrentUser.tsx","App.tsx","index.tsx"],"names":["TodoList","handleSelectByStatus","todoStatus","query","todos","getSelectedUser","queryHandler","selectedUserId","className","htmlFor","value","onChange","type","placeholder","map","todo","classNames","completed","readOnly","checked","title","userId","onClick","id","API_URL","getAllTodos","a","fetch","response","json","getSelectedUserDetails","editedUrl","selectedUserDetails","CurrentUser","state","user","this","props","setState","prevProps","loadUser","Error","name","email","phone","clearSelectedUser","React","Component","App","event","target","todosAPI","copyTodos","filter","toLowerCase","includes","filterTodos","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.422a2ac8.chunk.js","sourcesContent":["import React from 'react';\nimport './TodoList.scss';\nimport classNames from 'classnames';\n\ntype Props = {\n  handleSelectByStatus: (event: React.ChangeEvent<HTMLSelectElement>) => void,\n  todoStatus: string,\n  queryHandler: (event: React.ChangeEvent<HTMLInputElement>) => void,\n  query: string,\n  getSelectedUser: (selectedUserId: number) => void,\n  todos: Todo[],\n  selectedUserId: number,\n};\n\nexport const TodoList: React.FC<Props> = ({\n  handleSelectByStatus,\n  todoStatus,\n  query,\n  todos,\n  getSelectedUser,\n  queryHandler,\n  selectedUserId,\n}) => (\n  <div className=\"TodoList\">\n    <label htmlFor=\"selectTodosByStatus\">\n      Choose an status of todo:\n      <select\n        value={todoStatus}\n        onChange={handleSelectByStatus}\n      >\n        <option value=\"all\">All</option>\n        <option value=\"finished\">Finished</option>\n        <option value=\"unfinished\">Unfinished</option>\n      </select>\n    </label>\n    <input\n      type=\"text\"\n      placeholder=\"search\"\n      value={query}\n      onChange={queryHandler}\n    />\n    <h2>Todos:</h2>\n    <div className=\"TodoList__list-container\">\n      <ul className=\"TodoList__list\">\n\n        {todos.map((todo) => (\n          <li\n            key={todo.id}\n            className={classNames(\n              'TodoList__item',\n              { 'TodoList__item--checked': todo.completed },\n              { 'TodoList__item--unchecked': !todo.completed },\n            )}\n          >\n            <label htmlFor=\"todo\">\n              <input\n                type=\"checkbox\"\n                readOnly\n                checked={todo.completed}\n              />\n              <p>{todo.title}</p>\n            </label>\n            <button\n              className={classNames('TodoList__user-button button',\n                { 'TodoList__user-button--selected': todo.userId === selectedUserId })}\n              type=\"button\"\n              onClick={() => {\n                getSelectedUser(todo.userId);\n              }}\n            >\n              User&nbsp;\n              {todo.userId}\n            </button>\n          </li>\n        ))}\n      </ul>\n    </div>\n  </div>\n);\n","// eslint-disable-next-line\nconst API_URL = `https://mate.academy/students-api/todos`;\n\nexport async function getAllTodos() {\n  const response = await fetch(API_URL);\n  const todos = await response.json();\n\n  return todos;\n}\n\nexport async function getSelectedUserDetails(userId: number) {\n  const editedUrl = `https://mate.academy/students-api/users/${userId}`;\n\n  try {\n    const response = await fetch(editedUrl);\n    const selectedUserDetails = await response.json();\n\n    return selectedUserDetails;\n  } catch (error) {\n    return null;\n  }\n}\n","import React from 'react';\nimport './CurrentUser.scss';\n\nimport { getSelectedUserDetails } from '../../api/todos';\n\ntype Props = {\n  selectedUserId: number,\n  clearSelectedUser: () => void,\n};\n\ntype State = {\n  user: User | null,\n};\n\nexport class CurrentUser extends React.Component<Props, State> {\n  state: State = {\n    user: null,\n  };\n\n  async componentDidMount() {\n    const user = await getSelectedUserDetails(this.props.selectedUserId);\n\n    this.setState({ user });\n  }\n\n  async componentDidUpdate(prevProps: Props) {\n    if (prevProps.selectedUserId !== this.props.selectedUserId) {\n      this.loadUser();\n    }\n  }\n\n  async loadUser() {\n    const user = await getSelectedUserDetails(this.props.selectedUserId);\n\n    if (user !== null) {\n      this.setState({ user });\n    } else {\n      throw new Error('Invalid User');\n    }\n  }\n\n  render(): React.ReactNode {\n    const { user } = this.state;\n\n    return (\n      <div className=\"CurrentUser\">\n        <h2 className=\"CurrentUser__title\">\n          <span>\n            {'Selected user: '}\n            {this.props.selectedUserId}\n          </span>\n        </h2>\n        <h3 className=\"CurrentUser__name\">{user?.name}</h3>\n        <p className=\"CurrentUser__email\">{user?.email}</p>\n        <p className=\"CurrentUser__phone\">{user?.phone}</p>\n        <button\n          type=\"button\"\n          className=\"TodoList__user-button TodoList__user-button--selected\n          button\"\n          onClick={() => (\n            this.props.clearSelectedUser()\n          )}\n        >\n          Clear\n        </button>\n      </div>\n    );\n  }\n}\n","import React from 'react';\nimport './App.scss';\nimport './styles/general.scss';\nimport { TodoList } from './components/TodoList';\nimport { CurrentUser } from './components/CurrentUser';\nimport * as todosAPI from './api/todos';\n\ninterface State {\n  query: string,\n  todos: Todo[],\n  selectedUserId: number;\n  todoStatus: string,\n}\n\nclass App extends React.Component<{}, State> {\n  state: State = {\n    query: '',\n    todos: [],\n    selectedUserId: 0,\n    todoStatus: 'all',\n  };\n\n  componentDidMount() {\n    this.getAllTodos();\n  }\n\n  handleSelectByStatus = (event: React.ChangeEvent<HTMLSelectElement>) => {\n    const { value } = event.target;\n\n    this.setState({\n      todoStatus: value,\n    });\n  };\n\n  getAllTodos = async () => {\n    const todos = await todosAPI.getAllTodos();\n\n    this.setState({ todos });\n  };\n\n  getSelectedUser = (selectedUserId: number) => {\n    this.setState({ selectedUserId });\n  };\n\n  clearSelectedUser = () => {\n    this.setState({ selectedUserId: 0 });\n  };\n\n  queryHandler = (event: React.ChangeEvent<HTMLInputElement>) => {\n    const { value } = event.target;\n\n    this.setState({\n      query: value,\n    });\n  };\n\n  filterTodos() {\n    const { todos, query, todoStatus } = this.state;\n    const copyTodos = [...todos].filter((todo) => (\n      todo.title.toLowerCase().includes(query.toLowerCase())\n    ));\n\n    switch (todoStatus) {\n      case 'all': {\n        return copyTodos;\n      }\n\n      case 'finished': {\n        return copyTodos.filter(todo => todo.completed === true);\n      }\n\n      case 'unfinished': {\n        return copyTodos.filter(todo => todo.completed === false);\n      }\n\n      default: {\n        return copyTodos;\n      }\n    }\n  }\n\n  render() {\n    const { selectedUserId } = this.state;\n\n    return (\n      <div className=\"App\">\n        <div className=\"App__sidebar\">\n          <TodoList\n            handleSelectByStatus={this.handleSelectByStatus}\n            todoStatus={this.state.todoStatus}\n            query={this.state.query}\n            todos={this.filterTodos()}\n            getSelectedUser={this.getSelectedUser}\n            queryHandler={this.queryHandler}\n            selectedUserId={selectedUserId}\n          />\n        </div>\n\n        <div className=\"App__content\">\n          <div className=\"App__content-container\">\n            {selectedUserId ? (\n              <CurrentUser\n                selectedUserId={selectedUserId}\n                clearSelectedUser={this.clearSelectedUser}\n              />\n            ) : 'No user selected'}\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","import ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}